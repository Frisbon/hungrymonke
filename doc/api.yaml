openapi: 3.0.0

info:
  title: WASAText
  version: 1.0.5
  description: Project made by 2087354. In questa versione ho adattato l'API a seconda del codice Go.

  contact:
    name: Sasha
    url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
    email: bazhura.2087354@studenti.uniroma1.it

components:
  
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
  
  schemas:

    SendMessageRequest:
      type: object
      properties:
        recipientUsername:
          type: string
          description: Username del destinatario diretto. Ignorato se viene fornito un ID di conversazione.
          example: Ciccione
        message:
          $ref: "#/components/schemas/Message"
      required:
        - message
  
    Photo:
      description: A binary file that represent the image.
      type: string
      format: binary
      example: /9j/4AAQ
      
    UserID: 
      description: Unique identifier/name of a user. Also called Username/Author.
      type: string
      example: "Ciccione"

      
    GenericID:
      description: A universal multipurpose unique identifier. Should be autogenerated by back-end.
      type: string
      example: "genID"
      
    User:
      description: A resource representing a user.
      type: object
      properties:
        Username:
          description: Unique name of the user.
          $ref: "#/components/schemas/UserID"
        Photo:
          description: Profile picture of the user 
          $ref: "#/components/schemas/Photo"
        
    Message:
      description: A resource indicating a single message
      type: object
      properties:
        Timestamp:
          description: Timestamp of the message
          type: string
          format: time-stamp
          example: 2025-01-06T12:00:00Z

        Content:
          description: The content of the message, could contain plain text, photo, or both, or none...
          type: object
          properties:
            Photo:
              description: Photo content of the message
              $ref: "#/components/schemas/Photo"
            Text:
              description: Textual content of the message
              type: string
              example: Ciao! Ti volevo chiedere se mi presti 10$
          required: []  # Indica che Photo e Text sono opzionali
        MsgID:
          description: Unique identifier for the message. Should be autogenerated by the system.
          $ref: "#/components/schemas/GenericID"
          required: false 
        Author:
          description: Reference to the UserID of the user who sent the message.
          $ref: "#/components/schemas/UserID"
        Status:
          description: An ENUM representing the checkmarks/status of the message.
          type: string 
          enum: ['recieved', 'seen','delivered']
          example: 'delivered'
          # TODO setStatus i guess?
        Reactions:
          description: A collection of Reaction(s)
          type: array
          items:
            $ref: "#/components/schemas/Reaction"
        
            
    Reaction:
      type: object
      properties:
        Author: 
          description: Reference to the author's identifier.
          $ref: "#/components/schemas/UserID" 
        Timestamp:
          description: Timestamp of the reaction
          type: string
          format: time-stamp
          example: 2025-01-06T12:00:00Z
        Emoticon:
          description: An emoticon symbol representing the reaction.
          type: string
          maxLength: 1
          example: üçÜ

          
    ConversationELT:
      description: This is a resource representing a conversation (collection of messages) that will apear in the conversations list. 
      type: object
      properties:
        ConvoID:
          description: Unique ID of the conversation.
          $ref: "#/components/schemas/GenericID"
        DateLastMessage:
          description: Timestamp of the last message
          type: string
          format: time-stamp
          example: 2025-01-06T12:00:00Z
        Preview:
            description: Preview dell'ultimo messaggio. ["üì∑ Photo" se foto, "üì∑ TestoPreview..." se foto e testo, "TestoPreview..." se solo testo]
            type: string
            example: "Ciao, ti volevo chiedere se..."
        Messages:
          description: A collection of messages
          #Sorted in reverse chrono order? TODO (i dont know how to implement it and i will think about it later.)
          type: array
          items:
            $ref: '#/components/schemas/Message'
        

    Group:
      description: Resource representing a Group (A Conversation element and a collection of users.)
      type: object
      properties:
        GroupPhoto:
          description: Group Photo
          $ref: "#/components/schemas/Photo"
        Conversation:
          description: Resource/object representing a Conversation Element (a collection of messages and properites)
          $ref: "#/components/schemas/ConversationELT"
        Name:
          description: Group name
          type: string
          readOnly: false
        Users:
          description: A collection of users participating in the conversation.
          type: array
          minLength: 2
          # for a group to exist, minimum is 2
          items:
           $ref: '#/components/schemas/User'
            
    Private:
      description: Private 1v1 conversation. The "Chat Photo" should be that of the user im talking with.
      type: object
      properties:
        Conversation:
          description: Resource/object representing a Conversation Element (a collection of messages and properites)
          $ref: "#/components/schemas/ConversationELT"
        FirstUser:
          description: Reference to one of the users in a conversation. 
          $ref: '#/components/schemas/User'
        SecondUser: #can be the same as FirstUser, whatsapp allows to text yourself.
          description: Reference to one of the users in a conversation
          $ref: '#/components/schemas/User'
    
    
    #it does not differentiate between group and private conversations.
    Conversations:
      description: Resource representing the list of the user's conversations..
      type: array
      items:
        $ref: '#/components/schemas/ConversationELT'


paths:

  /admin/listUsers:
    description: List All Existing Users.

    get:
      responses:
        200:
          description: Existing Usernames list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        404:
          description: Users not found 
  
  /login:
    description: Login/Authentication path
    
    post:
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          text/plain:
            schema:
              description: Reference all'id dello user
              $ref: "#/components/schemas/UserID"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: Il token creato dal login
                    type: string
                  user:
                    description: Reference allo User
                    $ref: "#/components/schemas/User"
        '500':
          description: er token nun se crea ao
    


  #  /users/{UserID}:
  #    description: Made for practice to retrieve json of a user by his Username/UserID
  #   get:
  #      security:
  #        - bearerAuth: []
  #      parameters:
  #        - name: UserID
  #         in: path
  #          required: true
  #          schema:
  #            type: string
  #      responses:
  #        200:
  #          description: All good bro
  #          content:
  #            application/json:
  #              schema:
  #                $ref: '#/components/schemas/User'
    
    
    
  # "me" rappresenta il current user loggato (suppongo? scrivo senza capire na minchia lol, ma prima si fa e dopo si capisce, questa √® la filosofia della sapienza), mentre uso /{id} quando non deve essere per forza l'utente corrente (sono un admin ecc.)
  
  /users/me/username:
    description: Path utilizzato per l'operazione di setMyUserName
  
    put:  #setMyUserName
      operationId: setMyUserName
      summary: Aggiorna il nome utente di un utente loggato
      description: Utilizza la stringa passata come parametro per impostare il nuovo nome utente all'utente loggato in questo momento.
      
      security:
        - bearerAuth: []
        
      requestBody:
        required: true
        content:
          text/plain:  
            schema:
              description: Reference to the structure of the UserID
              $ref: '#/components/schemas/UserID'
              
      responses:
        "200":
         description: Aggiornato il nome utente con successo.
         content: #ritorna lo user
            application/json:
              schema: 
                description: Reference allo user
                $ref: "#/components/schemas/User"
        "404": 
            description: Utente non trovato :( 
        "400":
            description: Input non valido...  

  /conversations: 
    description: Conversations implica le conversazioni del CURRENT USER. Utilizzato per l'operazione di getMyConversations.

    get: #getMyConversations
      description: Recupera le conversazioni dell'utente loggato in questo momento 
      summary: Recupera lista messaggi.
      security:
        - bearerAuth: []
      operationId: getMyConversations
      responses:
        200:
          description: Hea' ya' go m8, yo' lefty convasations
          content:
            application/json:
              schema:
                description: Reference alla lista di conversazioni.
                $ref: '#/components/schemas/Conversations'
    
  /conversations/{ID}:
    description: Path utilizzato per l'operazione di getConversation
  
    get:  #getConversation
      description: Recupera la conversazione dell'utente loggato in questo momento tramite l'ID fornito come parametro 
      summary: Recupera una conversazione tramite il suo ID
      
      security:
        - bearerAuth: []
      operationId: getConversation 
      
      parameters:
      - name: ID
        in: path
        description: L'id della convo da prende
        required: true
        schema:
          description: Reference all'id della conversazione
          $ref: "#/components/schemas/GenericID" 
    
      responses:
        200:
          description: All good bro
          content:
            application/json:
              schema:
                description: Reference alla conversazione restituita.
                $ref: '#/components/schemas/ConversationELT'
        400:
          description: Convo not found man :C
    
  /conversations/messages:
    description: Path utilizzato per l'operazione di sendMessage  
  
    post: #sendMessage 
      description: Invia il messaggio contenuto nel body sulla conversazione identificata dal parametro.
      summary: Invia un messaggio in una convo data dall'id oppure direttamente ad un utente (se non esiste convo la crea).
      security:
        - bearerAuth: []
      operationId: sendMessage
      
      parameters:
        - name: ID
          in: query
          description: L'id della convo in cui mandare il messaggio
          required: false
          schema:
            description: ref all'id
            $ref: '#/components/schemas/GenericID'
      
      requestBody:
        description: Risorsa del Messaggio da inviare.
        required: true
        content:
          application/json:
            schema:
              description:
              $ref: '#/components/schemas/SendMessageRequest'
      
      responses:
        200:
          description: All good, message sent bro
          content:
            application/json:
              schema: 
                description: Reference al messaggio.
                $ref: "#/components/schemas/Message"
        404:
          description: Convo or user not found error.
        400:
          description: Parametri de schifo mhai dato
      
  #per il forwarding non mi serve la conversazione originaria, solo l'id del messaggio e la convo di destinazione come parametro perci√≤ uso /messages come path, siccome ci sono pi√π operazioni le separo in path (forward/comment ecc.)
  
  /messages/{ID}/forward:
    description: Path utilizzato per l'operazione di forwardMessage
  
    post: #forwardMessage
      description: Inoltra il messaggio, aggiungengo il suo id (passato come parametro) alla conversazione (contenuta nel body).
      summary: Inoltra un messaggio usando il suo id e convo elt.
      
      security:
        - bearerAuth: []
      operationId: forwardMessage
      
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      
      requestBody:
        required: true
        description: Conversazione destinataria (da cui prendo l'ID successivamente)
        content:
          application/json:
            schema: 
              description: Reference all'oggetto di conversazione
              $ref: "#/components/schemas/ConversationELT" 
      
      responses:
        200:
          description: All good, message forwarded bro
          content:
            application/json:
              schema:
                description: Reference al messaggio
                $ref: "#/components/schemas/Message"
        400:
          description: Message not found error.
    
  /messages/{ID}/comments:
    description: Path utilizzato per l'operazione di commentMessage
  
    post: #commentMessage (Reaction)
      description: Lascia una reazione, contenuta nel body, sul messaggio identificato dal parametro
      
      security:
        - bearerAuth: []
      operationId: commentMessage
      
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio da commentare
          required: true
          schema:
            description: Reference all'id del messaggio
            $ref: "#/components/schemas/GenericID"
      
      requestBody:
        required: true
        description: Passo l'oggetto "Reazione" necessario
        content:
          application/json:
            schema: 
              description: Reference alla reaction
              $ref: "#/components/schemas/Reaction"
      
      responses:
        200:
          description: All good, message commented bro
          content:
            application/json:
              schema: 
                description: Reference al messaggio
                $ref: "#/components/schemas/Message"
        400:
          description: Message not found error.
  
  /messages/{ID}/comments/{commentID}:
    description: Path usato per operazione uncommentMessage
  
    delete: #uncommentMessage (Delete Reaction)
      description: Rimuove il commento identificato dal parametro, dal messaggio altrettanto identificato dal parametro 
      
      security:
        - bearerAuth: []
      operationId: uncommentMessage
      
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio dove si trova il commento
          required: true
          schema:
            description: Reference all'id del messaggio
            $ref: "#/components/schemas/GenericID" 
        
        - name: commentID
          in: path
          description: L'id del commento da eliminare
          required: true
          schema:
            description: Reference all'id del commento
            $ref: "#/components/schemas/GenericID"
            
      responses:
        200:
          description: All good, comment deleted bro
          content:
            application/json:
              schema: 
                description: Reference al messaggio
                $ref: "#/components/schemas/Message"
        400:
          description: Message not found error.
        401:
          description: Comment not found error.
    
  /messages/{ID}:
    description: Path usato per operazione deleteMessage
  
    delete: #deleteMessage
      description: Elimina il messaggio identificato dal parametroe
    
    
      security:
        - bearerAuth: []
      operationId: deleteMessage
      
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio dove si trova il commento
          required: true
          schema:
            description: Reference all'id del messaggio
            $ref: "#/components/schemas/GenericID"

      responses:
        200:
          description: All good, comment deleted bro
        400:
          description: Message not found error.
  
  /groups/{ID}/members:
    description: Path usato per operazione addToGroup
  
    post: #addToGroup
      description: Aggiunge l'utente passato nel body al gruppo identificato dal parametro.
    
      security:
        - bearerAuth: []
      operationId: addToGroup
        
      parameters:
        - name: ID
          in: path
          description: L'id della convo-gruppo a cui aggiungere un utente
          required: true
          schema:
            description: Reference all'id del gruppo
            $ref: "#/components/schemas/GenericID"
        
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              description: Reference all'utente
              $ref: "#/components/schemas/User"
        
      responses:
        200:
          description: All good, user added to group
          content:
            application/json:
              schema: 
                description: Reference all'id del gruppo.
                $ref: "#/components/schemas/Group"  
        400:
          description: Convo not found error.
  
  /groups/{ID}/members/me:
    description: Path usato per operazione leaveGroup
  
    delete: #leaveGroup
      description: Elimina l'utente loggato dalla lista degli utenti del gruppo identificato dall'id passato come parametro.
    
      security:
        - bearerAuth: []
      operationId: leaveGroup
      
      parameters:
        - name: ID
          in: path
          description: L'id del gruppo da cui il user corrente (/me) vuole uscire
          required: true
          schema:
            description: Reference all'id del gruppo.
            $ref: "#/components/schemas/GenericID"

      responses:
        200:
          description: All good, you left the group bro
        400:
          description: Group not found error.
  
  /groups/{ID}/name:
    description: Path usato per operazione setGroupName
    
    put:  #setGroupName
      description: Cambia il nome del gruppo identificato dall'id usando la stringa nel body.
    
      security:
        - bearerAuth: []
      operationId: setGroupName
      
      parameters:
        - name: ID
          in: path
          description: L'id della convo-gruppo a cui cambiare il nome
          required: true
          schema:
            description: Reference all'id del gruppo
            $ref: "#/components/schemas/GenericID"
            
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              description: Group name string
              type: string
              readOnly: false
      
      responses:
        "200":
         description: Aggiornato il nome gruppo con successo.
         content: #ritorna il gruppo
            application/json:
              schema:  
                description: Reference al gruppo.
                $ref: "#/components/schemas/Group"
        "404": 
            description: Gruppo non trovato :(   
  
  /users/me/photo:
    description: Path usato per operazione setMyPhoto
    
    put:  #setMyPhoto
      description: Imposta la foto profilo dell'utente loggato al momento.
      
      security:
        - bearerAuth: []
      operationId: setMyPhoto
      
      requestBody:
        required: true
        content:
          multipart/form-data: #tecnicamente, se √® una richiesta va bene, ho letto sul libro che √® meglio non farlo per le risposte :)
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      
      responses:
        "200":
         description: Aggiornato la pfp con successo.
         content: #ritorna il user
            application/json:
              schema: 
                description: Reference ad un utente.
                $ref: "#/components/schemas/User"
      
  /groups/{ID}/photo:
    description: Path usato per operazione setGroupPhoto
  
  
    put:  #setGroupPhoto
      description: Imposta la foto profilo del gruppo identificato dal parametro
      security:
        - bearerAuth: []
      operationId: setGroupPhoto
      
      parameters:
        - name: ID
          in: path
          description: L'id della convo-gruppo a cui cambiare la foto
          required: true
          schema:
            description: Reference all'id della conversazione di gruppo
            $ref: "#/components/schemas/GenericID" 
      
      
      requestBody:
        content:
          multipart/form-data: #tecnicamente, se √® una richiesta va bene, ho letto sul libro che √® meglio non farlo per le risposte :)
            schema:
              description: Reference alla risorsa Foto
              $ref: "#/components/schemas/Photo" 
      
      responses:
        "200":
         description: Aggiornato la pfp con successo.
         content: #ritorna il gruppo
            application/json:
              schema: 
                description: Reference alla risorsa Group.
                $ref: "#/components/schemas/Group"   
      
      
      
      
      
      
      
  