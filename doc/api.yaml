openapi: 3.0.0
info:
  title: WASAText
  version: '1.1'
  description: Project made by 2087354. Risistemazioni finali per saziare il linter e le correzioni della vm del prof.
  contact:
    name: Sasha
    url: www.youtube.com/watch?v=dQw4w9WgXcQ
    email: bazhura.2087354@studenti.uniroma1.it

tags:
  - name: "Users"
  - name: "Message"
  - name: "Private Conversation"
  - name: "Group Conversation"
  - name: "DebugStuff"

servers:
  - url: http://localhost:8082/api
    description: Local dev server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Error:
      description: Generic error response schema.
      type: object
      properties:
        error:
          type: string
          description: Error message.
          example: "Resource not found"
          minLength: 1
          maxLength: 256
          pattern: ".+"

    SendMessageRequest:
      description: The content of a message to send.
      type: object
      properties:
        recipientUsername:
          type: string
          description: Username del destinatario diretto. Ignorato se viene fornito un ID di conversazione.
          example: Ciccione
          minLength: 1
          maxLength: 32
          pattern: ".+"
        message:
          $ref: "#/components/schemas/SendMessageContent"
      required:
        - message

    SendMessageContent:
      description: Struct inviata in post da SendMessage. Prende i stessi campi di Message ma senza status, author, ID, timestamp e reactions, siccome vengono gestiti dal sistema.
      type: object
      oneOf:
        - properties:
            photo:
              $ref: "#/components/schemas/Photo"
            text:
              type: string
              description: Text content of the message.
              example: Ciao! Ti volevo chiedere se mi presti 10$
              minLength: 1
              maxLength: 2048
              pattern: ".+"
          required:
            - photo
        - properties:
            photo:
              $ref: "#/components/schemas/Photo"
            text:
              type: string
              description: Text content of the message.
              example: Ciao! Ti volevo chiedere se mi presti 10$
              minLength: 1
              maxLength: 2048
              pattern: ".+"
          required:
            - text
        - properties:
            photo:
              $ref: "#/components/schemas/Photo"
            text:
              type: string
              description: Text content of the message.
              example: Ciao! Ti volevo chiedere se mi presti 10$
              minLength: 1
              maxLength: 2048
              pattern: ".+"
          required:
            - photo
            - text

    Photo:
      description: A binary file that represents the image.
      type: string
      format: binary
      example: /9j/4AAQ
      minLength: 1
      maxLength: 10000000
      pattern: ".+"

    UserID:
      description: Unique identifier/name of a user. Also called Username/Author.
      type: string
      example: "Ciccione"
      minLength: 1
      maxLength: 32
      pattern: ".+"

    GenericID:
      description: A universal multipurpose unique identifier. Should be autogenerated by back-end.
      type: string
      example: "genID"
      minLength: 1
      maxLength: 64
      pattern: ".+"

    User:
      description: A resource representing a user.
      type: object
      properties:
        Username:
          $ref: "#/components/schemas/UserID"
        Photo:
          $ref: "#/components/schemas/Photo"

    Message:
      description: A resource indicating a single message.
      type: object
      properties:
        Timestamp:
          description: Timestamp of the message.
          type: string
          format: date-time
          example: 2025-01-06T12:00:00Z
          minLength: 20
          maxLength: 30
          pattern: ".+"
        Content:
          description: The content of the message, could contain plain text, photo, or both, or none...
          type: object
          properties:
            Photo:
              $ref: "#/components/schemas/Photo"
            Text:
              type: string
              description: Text content of the message.
              example: Ciao! Ti volevo chiedere se mi presti 10$
              minLength: 1
              maxLength: 2048
              pattern: ".+"
        MsgID:
          $ref: "#/components/schemas/GenericID"
        Author:
          $ref: "#/components/schemas/User"
        Status:
          description: An ENUM representing the checkmarks/status of the message.
          type: string
          enum:  ['seen','delivered']
          example: 'delivered'
          minLength: 4
          maxLength: 9
          pattern: ".+"
        Reactions:
          description: A collection of Reaction(s)
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: "#/components/schemas/Reaction"

    SendReactionRequest:
      description: Request body for sending a reaction to a message.
      type: object
      properties:
        Emoticon:
          description: An emoticon symbol representing the reaction.
          type: string
          maxLength: 2
          minLength: 1
          pattern: ".+"
          example: üçÜ

    Reaction:
      description: A reaction to a message.
      type: object
      properties:
        Author:
          $ref: '#/components/schemas/User'
        Timestamp:
          description: Timestamp of the reaction.
          type: string
          format: date-time
          example: 2025-01-06T12:00:00Z
          minLength: 20
          maxLength: 30
          pattern: ".+"
        Emoticon:
          description: An emoticon symbol representing the reaction.
          type: string
          maxLength: 2
          minLength: 1
          pattern: ".+"
          example: üçÜ

    ConversationELT:
      description: This is a resource representing a conversation that will appear in the conversations list.
      type: object
      properties:
        ConvoID:
          $ref: "#/components/schemas/GenericID"
        DateLastMessage:
          description: Timestamp of the last message.
          type: string
          format: date-time
          example: 2025-01-06T12:00:00Z
          minLength: 20
          maxLength: 30
          pattern: ".+"
        Preview:
          description: Preview dell'ultimo messaggio.
          type: string
          example: "Ciao, ti volevo chiedere se..."
          minLength: 1
          maxLength: 256
          pattern: ".+"
        Messages:
          description: A collection of messages.
          type: array
          minItems: 0
          maxItems: 1000
          items:
            $ref: '#/components/schemas/Message'

    Group:
      description: Resource representing a Group.
      type: object
      properties:
        GroupPhoto:
          $ref: "#/components/schemas/Photo"
        Conversation:
          $ref: "#/components/schemas/ConversationELT"
        Name:
          description: Group name.
          type: string
          minLength: 1
          maxLength: 64
          pattern: ".+"
        Users:
          description: A collection of users participating in the conversation.
          type: array
          minItems: 1
          maxItems: 100
          items:
           $ref: '#/components/schemas/User'

    Conversations:
      description: Resource representing the list of the user's conversations.
      type: object
      properties:
        Username:
          $ref: "#/components/schemas/UserID"
        UserConversations:
          description: List of user's conversations.
          type: array
          minItems: 0
          maxItems: 1000
          items:
            $ref: '#/components/schemas/ConversationELT'

paths:
  /admin/listUsers: # Changed from list_users back to your original
    description: List All Existing Users.
    get:
      tags: ["Users"]
      summary: List all users
      description: List all users
      operationId: listAllUsers
      responses:
        "200":
          description: Existing Usernames list
          content:
            application/json:
              schema:
                type: object
                properties:
                  Users:
                    type: array
                    minItems: 0
                    maxItems: 1000
                    items:
                      $ref: "#/components/schemas/User"
        "404":
          description: Users not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/login:
    post:
      tags: ["Users"]
      summary: Logs in the user
      description: If the user does not exist, it will be created.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/UserID"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication.
                    minLength: 1
                    maxLength: 512
                    pattern: ".+"
                  user:
                    $ref: "#/components/schemas/User"
        '500':
          description: Could not create token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/me/username:
    put:
      tags: ["Users"]
      summary: Aggiorna il nome utente di un utente loggato
      operationId: setMyUserName
      description: Utilizza la stringa passata come parametro per impostare il nuovo nome utente.
      security: [bearerAuth: []]
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/UserID'
      responses:
        "200":
         description: Aggiornato il nome utente con successo.
         content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        "404": 
            description: Utente non trovato.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
        "400":
            description: Input non valido.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"

  /api/conversations:
    get:
      tags: ["Private Conversation", "Group Conversation"]
      summary: Recupera lista messaggi
      operationId: getMyConversations
      description: Recupera le conversazioni dell'utente loggato.
      security: [bearerAuth: []]
      responses:
        "200":
          description: Hea' ya' go m8, yo' lefty convasations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversations'

  /api/conversations/{ID}:
    get:
      tags: ["Private Conversation", "Group Conversation"]
      summary: Recupera una conversazione tramite il suo ID
      operationId: getConversation
      description: Recupera la conversazione dell'utente loggato tramite l'ID.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: path
          description: L'id della convo da prende
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      responses:
        "200":
          description: All good bro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationELT'
        "404":
          description: Convo not found man :C
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/conversations/messages:
    post:
      tags: ["Message"]
      summary: Invia un messaggio
      operationId: sendMessage
      description: Invia il messaggio contenuto nel body.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: query
          description: L'id della convo in cui mandare il messaggio
          schema:
            $ref: '#/components/schemas/GenericID'
      requestBody:
        description: Risorsa del Messaggio da inviare.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        "200":
          description: All good, message sent bro
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
        "404":
          description: Convo or user not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/messages/{ID}/forward:
    post:
      tags: ["Message"]
      summary: Inoltra un messaggio
      operationId: forwardMessage
      description: Inoltra il messaggio.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      requestBody:
        required: true
        description: ID conversazione alla quale inoltrare la roba.
        content:
          application/json:
            schema: 
              type: object
              properties:
                ConvoID:
                  $ref: "#/components/schemas/GenericID"
      responses:
        "200":
          description: All good, message forwarded bro
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Message not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/messages/{ID}/comments:
    post:
      tags: ["Message"]
      summary: Commenta un messaggio
      operationId: commentMessage
      description: Lascia una reazione sul messaggio.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio da commentare
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      requestBody:
        required: true
        description: L'oggetto "Reazione".
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/SendReactionRequest"
      responses:
        "200":
          description: All good, message commented bro
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Comment already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: ["Message"]
      summary: Rimuovi commento
      operationId: uncommentMessage
      description: Rimuove il commento del user.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      responses:
        "200":
          description: All good, comment deleted bro
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message"
        "404":
          description: Message or Comment not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Non sei l'autore del messaggio!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/messages/{ID}:
    delete:
      tags: ["Message"]
      summary: Elimina messaggio
      operationId: deleteMessage
      description: Elimina il messaggio.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: path
          description: L'id del messaggio
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      responses:
        '200':
          description: All good, message deleted bro
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Message" 
        '400':
          description: Message not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/groups/members:
    put:
      tags: ["Group Conversation"]
      summary: Aggiungi utente a gruppo
      operationId: addToGroup
      description: Aggiunge l'utente passato nel body al gruppo.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: query
          description: L'id della convo-gruppo.
          schema:
            $ref: "#/components/schemas/GenericID"
      requestBody:
        required: true
        content:
          text/plain:
            schema: 
              $ref: "#/components/schemas/UserID"
      responses:
        '200':
          description: All good, user added to group
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Group"  
        '400':
          description: Convo not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: ["Group Conversation"]
      summary: Lascia il gruppo
      operationId: leaveGroup
      description: L'utente loggato lascia il gruppo.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: query
          description: L'id del gruppo
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      responses:
        '204':
          description: All good, you left the group bro
        '400':
          description: Group not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/groups/{ID}/name:
    put:
      tags: ["Group Conversation"]
      summary: Rinomina gruppo
      operationId: setGroupName
      description: Cambia il nome del gruppo.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: path
          description: L'id del gruppo
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      requestBody:
        required: true
        content:
          text/plain:
            schema: 
              type: string
              description: New group name.
              minLength: 1
              maxLength: 64
              pattern: ".+"
      responses:
        "200":
         description: Aggiornato il nome gruppo con successo.
         content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Group"
        "404": 
            description: Gruppo non trovato.
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"

  /api/users/me/photo:
    put:
      tags: ["Users"]
      summary: Imposta foto profilo
      operationId: setMyPhoto
      description: Imposta la foto profilo dell'utente loggato.
      security: [bearerAuth: []]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Profile photo file.
                  minLength: 1
                  maxLength: 10000000
                  pattern: ".+"
              required:
                - file
      responses:
        "200":
         description: Aggiornato la pfp con successo.
         content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"

  /api/groups/{ID}/photo:
    put:
      tags: ["Group Conversation"]
      summary: Imposta foto gruppo
      operationId: setGroupPhoto
      description: Imposta la foto profilo del gruppo.
      security: [bearerAuth: []]
      parameters:
        - name: ID
          in: path
          description: L'id del gruppo
          required: true
          schema:
            $ref: "#/components/schemas/GenericID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        "200":
          description: Aggiornato la pfp con successo.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Group"

  /debug:
    get:
      tags: ["DebugStuff"]
      summary: Stampa DBs
      operationId: debugDBs
      description: Terminal DBs content viewer
      responses:
        "204":
          description: filler lol